@using Ubik.Web.Backoffice
@using Ubik.Web.Infra.Navigation
@using Ubik.Web.Infra.Navigation.Contracts
@{
    Func<string> getActiveListItemId = () =>
    {
        try
        {
            var result = string.Empty;
            var path = Request.RawUrl.Substring(Request.RawUrl.IndexOf("backoffice", StringComparison.Ordinal));
            var item = Model.Raw.FirstOrDefault(x => path.EndsWith(x.Href));
            if (item != null) result = string.Format("itm_{0}", item.Id.ToString());
            return result;
        }
        catch (Exception)
        {

            return string.Empty;
        }

    };
}
@model IMenuProvider<INavigationElements<int>>

@helper RenderChildren(BackofficeNavigationElement item, NavigationGroupDto groupDto)
{
    if (!item.HasChildren)
    {
        return;
    }
    <ul id="grp_@item.Id" class="strip-list-style">
        @foreach (var child in from object subitem in item.Children select subitem as BackofficeNavigationElement)
        {
            @RenderMenuElement(child, groupDto)
        }
    </ul>
}
@helper RenderMenuElement(BackofficeNavigationElement child, NavigationGroupDto groupDto)
{
    var hasChildernClass = (child.HasChildren && child.Depth == 1 && false) ? "treeview" : string.Empty;
    <li id="itm_@child.Id.ToString()" class="@hasChildernClass">
        @switch (child.Role)
        {
            case NavigationElementRole.Anchor:
            <a href="@Url.Content("~/backoffice/" + child.Href)" target="@child.AnchorTarget">
                <i class="@child.IconCssClass"></i>
                <span>@child.Display</span>
            </a>
                break;
            case NavigationElementRole.Label:
            <a href="#">
                <i class="@child.IconCssClass"></i>
                <span>@child.Display</span>
            </a>
                break;
            default:
            <span>@child.Display</span>
                break;
        }

        @RenderChildren(child, groupDto)
    </li>
}

<ul class="sidebar-menu">

    @foreach (var grp in Model.Raw.Select(x => x.Group).Distinct().OrderBy(x => x.Weight))
    {
        <li id="@grp.Key" class="treeview">
            <a href="#">
                <i class="@grp.IconCssClass"></i>
                <span>@grp.Display</span>
                <i class="fa fa-angle-left pull-right"></i>
            </a>
            <ul class="treeview-menu" id="@grp.Key">
                @foreach (var item in Model.Menu.Cast<object>().Select(menuItem => menuItem as BackofficeNavigationElement).Where(item => item.Group.Key == grp.Key))
                {
                    @RenderMenuElement(item, grp)
                }
            </ul>
        </li>
    }
    </ul>

