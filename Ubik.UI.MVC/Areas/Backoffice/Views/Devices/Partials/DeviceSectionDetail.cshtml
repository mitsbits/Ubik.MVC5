@using Ubik.Web.Components
@using Ubik.Web.Components.AntiCorruption.ViewModels
@model Ubik.Web.Components.AntiCorruption.ViewModels.Devices.SectionViewModel
@{
    var title = (Model.SectionId == 0)? "New Section" : Model.FriendlyName;
}

<div class="panel box box-primary">
    <div class="box-header">
        <h3 class="box-title col-md-12">
            <a data-toggle="collapse" href="#new-section-form" class="collapsed btn btn-primary">
                @title
            </a>
            @if (Model.SectionId != 0)
            {
                @Html.ActionLink("New Section", "LayOuts", "Devices", new { id = Model.DeviceId, section = 0 }, new { @class = "btn btn-primary pull-right" })
            }
        </h3>
    </div>
    @using (Html.BeginForm("UpdateSection", "Devices", FormMethod.Post, new { role = "form", }))
    {
        @Html.AntiForgeryToken()
        <div class="panel-collapse collapse" id="new-section-form">

            <div class="box-body">

                <div class="form-group hidden">
                    @Html.LabelFor(m => m.SectionId)
                    @Html.HiddenFor(m => m.SectionId, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.SectionId, "", new { @class = "" })
                </div>
                <div class="form-group hidden">
                    @Html.LabelFor(m => m.DeviceId)
                    @Html.HiddenFor(m => m.DeviceId, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.DeviceId, "", new { @class = "" })
                </div>
                <div class="form-group">
                    <div class="input-group">
                        <span class="input-group-addon">@Html.LabelFor(m => m.FriendlyName)</span>
                        @Html.TextBoxFor(m => m.FriendlyName, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(m => m.FriendlyName, "", new { @class = "" })
                </div>

                <div class="form-group">
                    <div class="input-group">
                        <span class="input-group-addon">@Html.LabelFor(m => m.Identifier)</span>
                        @Html.TextBoxFor(m => m.Identifier, new { @class = "form-control" })
                    </div>
                    @Html.ValidationMessageFor(m => m.Identifier, "", new { @class = "" })
                </div>

                <div class="form-group">
                    <div class="input-group ">
                        <span class="input-group-addon">
                            <span>
                                @Html.LabelFor(m => m.ForFlavor)
                            </span>
                        </span>
                        <div class="form-control">
                            @foreach (DeviceRenderFlavor option in Enum.GetValues(typeof(DeviceRenderFlavor)))
                            {
                                <div class="radio-inline">
                                    <label>
                                        @Html.RadioButtonFor(m => m.ForFlavor, option) @option.ToString()
                                    </label>
                                </div>
                            }
                        </div>
                    </div>
                    @Html.ValidationMessageFor(m => m.ForFlavor, "", new { @class = "" })
                </div>
            </div>
            <div class="box-footer clearfix">
                <div class="form-group ">
                    <button type="submit" class="btn btn-primary pull-right">Submit</button>
                </div>
            </div>
        </div>
    }
</div>